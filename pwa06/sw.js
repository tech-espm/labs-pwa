"use strict";

self.addEventListener("install", function (e) {
	// Realmente nenhuma preparação durante a instalação...
});

self.addEventListener("fetch", function (e) {
	// Pela primeira vez no workshop, vamos fazer algo aqui dentro!

	// Vamos deixar requisições como PUT, POST, DELETE etc. serem tratadas diretamente pelo navegador.
	if (e.request.method !== "GET")
		return;

	// Apenas para ilustrar o modo da requisição, como mostrado aqui:
	//
	// https://developer.mozilla.org/en-US/docs/Web/API/Request
	// https://developer.mozilla.org/en-US/docs/Web/API/Request/mode
	console.log("Modo da requisição: " + e.request.mode);

	console.log("URL da requisição: " + e.request.url);

	// Vamos fazer uma brincadeira aqui, apenas para demonstrar o uso do método respondWith().
	//
	// Ao executar esse método, estamos pedindo para o navegador não realizar seu comportamento padrão,
	// e para que ele atenda a requisição utilizando outro recurso, vindo de outro lugar, ou até mesmo
	// gerado em tempo real aqui dentro do Service Worker!
	//
	// Deixar o navegador realizar seu comportamento padrão é equivalente a executar a seguinte linha:
	// e.respondWith(fetch(e.request));
	//
	// O método respondWith() espera como parâmetro uma Response ou uma Promise qualquer, que
	// produza uma Response ao final.
	if (e.request.url.endsWith("praia.jpg")) {
		// Esta foto em especial nós iremos substituir por um conteúdo gerado em tempo real!
		// O array de bytes é um arquivo PNG bem simples, com uma faixa branca e outra preta.
		// Mais informações sobre isso aqui: https://developer.mozilla.org/en-US/docs/Web/API/Response/Response
		let array = new Uint8Array([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0xC1, 0xDE, 0xE8, 0xD6, 0x00, 0x00, 0x00, 0x75, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0xED, 0xD0, 0x31, 0x01, 0x00, 0x00, 0x04, 0x00, 0x30, 0xFD, 0x43, 0xE3, 0x55, 0x01, 0x5B, 0x84, 0x45, 0x3D, 0x17, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0xE0, 0x42, 0x40, 0x4E, 0x1F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xF5, 0x1A, 0x44, 0x11, 0xC3, 0xA5, 0x7C, 0x0D, 0x66, 0x4B, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82 ]);
		let blob = new Blob([array], { type: "image/png" });
		e.respondWith(new Response(blob));
	} else if (e.request.url.endsWith(".jpg")) {
		// Caminhos relativos usam como base o caminho do arquivo do Service Worker.
		e.respondWith(fetch("../assets/images/fake.jpg"));
	}

	// Detalhe importante!!!
	// Repare como até mesmo requisições para URL's externas também passam pelo Service Worker!!!
});
